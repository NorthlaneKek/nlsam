#! /usr/bin/env python

from __future__ import division, print_function

import numpy as np
from numpy.testing import assert_almost_equal, assert_array_less, run_module_suite

from nlsam.bias_correction import corrected_sigma, multiprocess_stabilization


def test_corrected_sigma():

    eta = np.full((10, 10, 10, 10), 100)
    sigma = np.full((10, 10, 10, 10), 1)
    N = 1
    mask = np.ones_like(sigma)

    output = corrected_sigma(eta, sigma, N, mask)
    assert_almost_equal(output, sigma, decimal=4)

    output = corrected_sigma(eta, sigma[..., 0], N)
    assert_almost_equal(output, sigma, decimal=4)

    mask[5:8, 3:9] = 0
    output = corrected_sigma(eta, sigma, N, mask)
    sigma[5:8, 3:9] = 0
    assert_almost_equal(output, sigma, decimal=4)

    # magnitude SNR of 0.5 -> sigma = 50, eta = 25 for N = 1
    eta = 17.5
    sigma = 35
    output = corrected_sigma(eta, sigma, N)
    assert_almost_equal(output, 50, decimal=0)


# Taken from original example
def test_stabilization():

    noisySI = [974.4680312435205, 920.5810792869341, 819.6650525922458, 802.5190824927682, 727.7646357302121, 673.6333509410033,
               637.1774633934145, 602.8078282410685, 567.7671645871519, 498.7547410153283, 485.5944666179963, 428.07612179503263,
               388.6169930632023, 386.18961037199415, 376.08823042097316, 338.8477133073723, 309.2480238229747, 294.5568206195705,
               281.2171535075004, 213.8208886916726, 254.72160898469483, 195.57830703833136, 211.93867859510462, 199.35740205728564,
               156.25468049264455, 195.68094257648, 145.5655485672349, 142.54704777102097, 146.47263504779266, 94.33540214158423,
               99.05286040252803, 136.20629630937805, 100.99664099645533, 69.68392363472498, 62.14865572661666, 52.90535288375964,
               49.658854513180145, 44.697987693731164, 93.30094647357532, 76.58788137313091, 44.495013750130134, 49.78130435111957,
               28.591123274109403, 14.369557430945626, 15.942197375234471, 33.018212055985686, 26.294114699100742, 28.04829536743325,
               37.51661668556541, 24.48232853550999, 31.99219938621985, 52.34547007932935, 26.191496658272193, 41.97686572440534,
               36.3838412672615, 13.115824695742333, 23.5749116813857, 40.302257429852816, 15.969279873602586, 7.895003815354128,
               24.188839271486874, 29.558535336818906, 25.768383455514858, 33.7149871310329, 33.41987503558679, 28.325411074385094,
               28.696660350714314, 14.07918430602742, 28.408626617687165, 37.46161004997681, 16.56374580286518, 32.37433087637632,
               9.729146991334474, 31.138236631716335, 9.167230200724529, 18.04542095255966, 52.10527513423827, 8.605375161904306,
               34.09528519417992, 63.3642397915748, 61.82192674167916, 10.402761307531772, 43.507101594742785, 17.706587093874955,
               28.37424648150537, 53.99808241916874, 27.468625611884256, 28.907958786532625, 5.016136842885782, 12.331750562238897,
               12.152385742126548, 14.708345988504204, 20.880343502584108, 45.633794111081926, 33.192065161666356, 12.913596989980766,
               45.29593334531513, 29.53694349839379, 46.163861173396285, 30.7950601400292]

    noisySI = np.array(noisySI)
    sigma = 20 * np.ones_like(noisySI)
    N = 1
    mask = np.ones_like(noisySI, dtype=np.bool)
    output, eta = multiprocess_stabilization(noisySI, noisySI, mask, sigma, N, clip_eta=False)

    answer = [974.2593726961478, 920.3597667319971, 819.4231414958396, 802.2668203840909, 727.4911655717409, 673.3397826429069,
              636.8655525156472, 602.4762973365341, 567.4138194140878, 498.36462680537056, 485.1850405704123, 427.6244261928154,
              388.1256497359557, 385.67824995114523, 375.550487309446, 338.25943462672035, 308.6082359466962, 293.8753142961541,
              280.4916819303696, 212.95552793566432, 253.8956549617732, 194.59559884274094, 210.95459224130636, 198.29899885042968,
              155.00568696626567, 194.51918845151363, 144.1531688581149, 141.0556597413872, 144.93682118478924, 92.32463302866627,
              96.99864160364926, 134.390675844964, 98.77163808516804, 66.86041462967017, 59.01058535014334, 49.33084567830052,
              45.78395417969499, 40.40195130633103, 90.30452841877286, 73.09523092130462, 39.538701406456745, 44.923916179379724,
              21.524819337268777, 2.820316365861366, 4.547482300636311, 25.626003309507375, 17.342640577295022, 19.162913692479087,
              30.00643329778439, 14.150562288816953, 23.23493062732895, 46.02474785656308, 15.872957579637127, 34.52136613085204,
              28.130876133261662, -3.2174505936025426, 12.443049405628651, 32.67940631097349, 1.6787650036381692, -13.399037943001979,
              13.447168302800774, 20.24060349684604, 15.531496420565338, 25.223446441028116, 24.855270814361273, 18.66489721848824,
              19.050759954801688, -1.579409967777238, 18.455007635460614, 29.13402464314681, 1.67455620109423, 22.696580697922574,
              -11.576166656070544, 20.487375774483535, -14.252931105463608, 1.17382943507633, 43.51615128517772, -19.195336233250714,
              19.70798582645859, 50.43287809129897, 41.837380939647375, -31.22879936476589, 16.28225096283407, -20.44505140252145,
              -5.360035836498812, 26.012597370773324, -7.420160356020831, -5.2786865917498265, -49.61487490109381, -29.915540407092003,
              -28.174166156025954, -19.14950163583434, 2.092206023707173, 36.610231728702075, 23.401060738784402, -3.290610983920377,
              38.97549861580737, 21.928292961384074, 40.847622456375305, 24.546650297329517]

    answer = np.array(answer)

    # I don't do smoothing spline, and we can't access intermediate arrays, but we are roughly equal for the first 35 terms though.
    assert_array_less((np.abs(output - answer) / np.abs(answer))[35], 1e-2)


if __name__ == "__main__":
    run_module_suite()
